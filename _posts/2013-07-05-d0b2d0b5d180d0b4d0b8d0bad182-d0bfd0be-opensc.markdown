---
author: wrfsh
comments: true
date: 2013-07-05 15:23:45+00:00
layout: post
slug: '%d0%b2%d0%b5%d1%80%d0%b4%d0%b8%d0%ba%d1%82-%d0%bf%d0%be-opensc'
title: Вердикт по OpenSC
wordpress_id: 212
categories:
- crypto
---

Если коротко, то криптографический токен можно поддержать "из коробки" портированной связкой opensc/openct при выполнении следующих условий:



	
  1. Аутентификационные данные и прочие объекты, расположенные на токене, поддерживают стандарт PKCS#15

	
  2. OpenSC/OpenCT предоставляет драйвер ридера этого токена, который знает APDU протокол этого устройства.


А как же PKCS#11? Дело в том, что реализация PKCS#11 в OpenSC опирается на PKCS#15 с одной стороны и драйвер ридера токена с другой. Так что если для конкретного устройства выполняются два условия выше, то PKCS#11 должен "просто работать".

Что же было не так с eToken? Возникла теория, которую я решил проверить напрямую и она подтвердилась. Дело в том, что eToken не поддерживает PKCS#15. Функция [C_Login](https://github.com/OpenSC/OpenSC/blob/master/src/pkcs11/pkcs11-session.c#L233) в реализации PKCS#11 в OpenSC [опирается ](https://github.com/OpenSC/OpenSC/blob/master/src/pkcs11/pkcs11-session.c#L284)как раз на PKCS#15, конкретнее на функцию [pkcs15_login](https://github.com/OpenSC/OpenSC/blob/master/src/pkcs11/framework-pkcs15.c#L1332). Которая не работает, потому что аутентификационные данные на eToken не поддерживают этот формат.

Если вернутся к условиям в начале поста, то я уверен, что OpenSC удачное решение. Оно не дает 100% покрытия, но на мой взгляд eToken скорее исключение нежели чем правило. Исключение которое нам по силам победить даже в худшем случае. ;)

Стратегии победы включают в себя портирование их бинарных сборок на UEFI и/или реверсинг с технической стороны и переговоры с вендором с политической.
