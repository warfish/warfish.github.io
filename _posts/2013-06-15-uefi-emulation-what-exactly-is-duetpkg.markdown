---
author: wrfsh
comments: true
date: 2013-06-15 12:04:50+00:00
layout: post
slug: uefi-emulation-what-exactly-is-duetpkg
title: '[UEFI Emulation] What exactly is DuetPkg'
wordpress_id: 137
tags:
- preboot
- UEFI
---

Речь пойдет о том, что именно такое DuetPkg в EDK2, какую роль он выполняет.

DuetPkg, в рамках EDK пакета ([http://sourceforge.net/p/edk2/code/HEAD/tree/trunk/edk2/DuetPkg/](http://sourceforge.net/p/edk2/code/HEAD/tree/trunk/edk2/DuetPkg/)) служит базовой реализацией платформы UEFI поверх Legacy BIOS. На этапе загрузки в его задачи входит загрузка образа, инициализация защищенного режима, страничной памяти и таблицы прерываний, - все под требования остальных компонентов EDK, чтобы они "просто работали". В рантайме он занимается эмуляцией NVRAM и предоставляет сервис для возврата в реальный режим и вызовы прерываний BIOS.  Если разобрать его покомпонентно, то получается такая картина:



	
  * [BootSector](http://sourceforge.net/p/edk2/code/HEAD/tree/trunk/edk2/DuetPkg/BootSector) - набор ассемблерных программ реального и защищенного режима. Из них комбинируется цепочка загрузки на разных платформах. Mbr, FAT boot sector и старт EfiLoader-а, - все там.

	
  * [EfiLdr](http://sourceforge.net/p/edk2/code/HEAD/tree/trunk/edk2/DuetPkg/EfiLdr) - загрузчик PE образов. Ему передается управление сразу после перехода в плоский защищенный режим. В его задачи входит расжатие остальных компонентов образа, парсинг и релокация PE и передача управления в DxeIpl

	
  * [DxeIpl](http://sourceforge.net/p/edk2/code/HEAD/tree/trunk/edk2/DuetPkg/DxeIpl) - Занимается базовой инициализацией платформы. Инициализирует paging, таблицу прерываний защищенного режима и отдает управление в DxeCore, который уже является стандартным компонентом из MdePkg, т.е. "прикладным" кодом EDK.

	
  * [PciBusNoEnumerationDxe](http://sourceforge.net/p/edk2/code/HEAD/tree/trunk/edk2/DuetPkg/PciBusNoEnumerationDxe)/[PciRootBridgeNoEnumerationDxe](http://sourceforge.net/p/edk2/code/HEAD/tree/trunk/edk2/DuetPkg/PciRootBridgeNoEnumerationDxe) - драйвера PCI шины. Предоставляют доступ к PCI configuration space, реализуют PCI IO, позволяют обходить шину и искать там конкретные устройства. NoEnumeration означает что эти компоненты не занимаются аллокацией PCI ресурсов. Т.е. если какое-то устройство на шине не было проинициализировано биосом, то выделением и арбитрацией ресурсов для него будет заниматься конкретный драйвер этого устройства, а не эти компоненты.

	
  * [BiosVideoThunkDxe](http://sourceforge.net/p/edk2/code/HEAD/tree/trunk/edk2/DuetPkg/BiosVideoThunkDxe) - механизм вызова INT 10h биоса и реализация EFI_GRAPHICS_OUTPUT_PROTOCOL поверх него.

	
  * [FSVariable](http://sourceforge.net/p/edk2/code/HEAD/tree/trunk/edk2/DuetPkg/FSVariable) - драйвер эмуляции NVRAM через файл на загрузочной флешке.


Остальные компоненты выполняют вспомогательную функцию и особого интереса не представляют. Для реализации всего остального UEFI окружения, например страничного аллокатора, загрузчика драйверов, базу данных хендлов и фреймворка пользовательского интерфейса (HII) используются компоненты не входящие напрямую в DuetPkg, а находящиеся в основном в MdePkg, MdeModulePkg, PcAtChipsetPkg, IntelFrameworkPkg.

Получается, что все богатство эмуляции, которое видно после загрузки с флешки со сборкой DuetPkg реализовано именно прикладным кодом EDK, а не дуэтом. Если разобрать как выглядит сборка дуэта в рантайме и как она загружается (например с флешки), то получается примерно так:

	
  1. BIOS загружает MBR флешки (DuetPkg/BootSecotor/Mbr.asm)

	
  2. MBR ищет FAT12/16/32 раздел, читает boot sector (DuetPkg/BootSector/bs32.asm) и отдает ему управление

	
  3. BS парсит FAT и ищет файл EfiLdr20, лежащий в корне раздела. Затем он загружает первый сектор этого файла и отдает ему управление.

	
  4. Структура EfiLdr20:

	
    1. Start32.com (BootSector/Start32.asm). Разделен на две части. В первом секторе находится код реального режима, который поднимает с диска весь остальной EfiLdr20 и переходит по оффсету 0x200 в нем.

	
    2. Start32.com2 (тот же BootSector/Start32.asm). Вторая половина переводит машину в защищенный режим и передает управление Efi32.com2, по оффсету 0x1000 внутри файла

	
    3. Efi32.com2 (BootSecotor/Efi32.asm). Составляет e820 карту памяти, парсит заголовок EfiLoader и передает ему управление с параметром - адресом карты памяти.

	
    4. EfiLoader. Был описан ранее. Разжимает, релоцирует и запускает DxeIpl/PE

	
    5. DxeIpl. Был описан ранее. Инициализирует платформу и запускает DxeCore/PE.





На этом вклад DuetPkg в этап загрузки системы заканчивается. DxeCore, который работает следом, уже часть MdePkg. Он парсит базу данных драйверов FV (которая идет следом за ним в EfiLdr20) и загружает каждый из этих драйверов. Драйвера, загружаясь, инициализируются, создают хендлы и публикуют на них протоколы, - обычный такой UEFI рантайм. В конце концов загружается BootManager, ищет загрузочное устройство и запускает с него шелл. Или не запускает, если не нашел. Суть описанного в том, что DuetPkg существует в качестве jump start-ера ядра EDK и всех его драйверов. В рантайме он предоставляет дополнительные драйвера, но немного.

Возникает вопрос, а можно ли тогда сделать "свой" DuetPkg и, главное, зачем?

Можно, причем это не слишком тяжело. Вещи типа страничного аллокатора и базы данных хендлов и HII и всего остального идут "бесплатно" из других компонентов EDK. Все что требуется от своей реализации это инициализировать пейджинг, таблицу прерываний, несколько драйверов и обеспечить загрузку всего этого добра согласно протоколам UEFI.

Зачем это может понадобится? Затем, что задача DuetPkg это окружение для тестирования UEFI приложений и драйверов на Legacy BIOS машинах. Он не подразумевает например последующую загрузку UEFI-capable или любой другой ОС. В результате он все-таки не слишком заботится о сохранении состояния аппаратуры для биоса. Задачи бывают разные, с разными требованиями, для реализации которых нужно переделывать процесс загрузки образа, иначе обходится с аппаратурой, больше опираться на биос, не лезть в ACPI, выкинуть эмуляцию NVRAM и т.д. Возможно проще сделать свой Duet (попутно вытянув из оригинала все что можно) нежели чем перепиливать существующий пополам.

К слову загрузку я уже переделал. Вместо флешки образ кладется на диск, стартует мой MBR, поднимает с сырого диска ld.com, который поднимает весь образ EfiLdr20 и отдает управление сразу в пункт 4.2, т.е. второй части Start32.com
