---
author: wrfsh
comments: true
date: 2013-06-25 15:35:11+00:00
layout: post
slug: uefi-emulation-localized-input-and-output
title: '[UEFI Emulation] Localized input and output'
wordpress_id: 168
tags:
- preboot
- UEFI
---

Следующая цель прототипирования: локализованный ввод и вывод. Мы хотим, чтобы пользователь мог ввести свой логин и пароль на своем родном языке и чтобы мы могли локализовать ему пребут. Это означает, что нам нужна поддержка:



	
  * Юникодных строк и их рендеринга на графический дисплей.

	
  * Клавиатурных раскладок с маппингом на юникодные символы.


Что на данный момент удалось получить от EDK/Duet.

Сначала о выводе юникода на экран. Вообще весь UEFI и EDK юникодные (UTF16). Для вывода юникодных строк на дисплей UEFI предоставляет описание шрифта: [http://wiki.phoenix.com/wiki/index.php/EFI_HII_SIMPLE_FONT_PACKAGE_HDR](http://wiki.phoenix.com/wiki/index.php/EFI_HII_SIMPLE_FONT_PACKAGE_HDR). Это по сути таблица маппинга UTF16 кода символа на глиф размером либо 9x19 либо 16x19 пикселей. EDK предоставляет драйвер графической консоли, который учитывает наборы этих шрифтов и рендерит каждый символ в UTF16 строке согласно ее глифу, учитывая переносы строк, слияние границ символов и т.д. И это достаточно много очень противного кода.

Модель для разработчика получается такая: чтобы поддержать печать текста например на русском языке надо изготовить таблицу глифов для каждого UTF16 символа этого языка, загрузить ее в рантайме и автомагически вся печать на дисплей будет работать. Есть также более продвинутое описание шрифтов, не привязанное к размеру глифа: [http://wiki.phoenix.com/wiki/index.php/EFI_HII_FONT_PACKAGE_HDR](http://wiki.phoenix.com/wiki/index.php/EFI_HII_FONT_PACKAGE_HDR).

Никто не запрещает поступить как grub2 - сделать большой шрифт со всеми нужными языками в одном пакете и грузить его целиком. Никто не запрещает взять векторный шрифт и отрендерить его в нужно размере получив таким образом растр. В общем с этой стороны поддержку можно считать достаточной.

Теперь о вводе. UEFI предоставляет в том же пакете HII (Human Interface Infrastructure) еще один тип ресурсов - клавиатурные раскладки: [http://wiki.phoenix.com/wiki/index.php/EFI_HII_KEYBOARD_LAYOUT](http://wiki.phoenix.com/wiki/index.php/EFI_HII_KEYBOARD_LAYOUT). Раскладка это таблица маппинга скан кода на UTF16 код символа + флаги: [http://wiki.phoenix.com/wiki/index.php/EFI_KEY_DESCRIPTOR](http://wiki.phoenix.com/wiki/index.php/EFI_KEY_DESCRIPTOR). Здесь маппинг уже не такой прямой как в случае со шрифтами. В поле атрибутов можно указать ряд флагов, а клавиатурный драйвер будет их учитывать и изменять свое внутреннее состояние в зависимости от нажатой клавиши. Например через флаги EFI_NS_KEY_MODIFIER и EFI_NS_KEY_DEPENDENCY_MODIFIER реализуется поддержка "мертвых клавиш".

Модель для разработчика выглядит примерно так же как и в случае со шрифтами: чтобы поддержать ввод символов например на русском языке нужно изготовить таблицу дескрипторов и загрузить ее в рантайме. Но как оказалось тут кроется подстава. В EDK две реализации клавиатурного драйвера: [UsbKbDxe](http://sourceforge.net/p/tianocore/edk2/ci/master/tree/MdeModulePkg/Bus/Usb/UsbKbDxe) и [Ps2KeyboardDxe](http://sourceforge.net/p/tianocore/edk2/ci/master/tree/IntelFrameworkModulePkg/Bus/Isa/Ps2KeyboardDxe). Первый - драйвер USB клавиатуры, а второй - PS2, работающий через [Intel 8042](http://en.wikipedia.org/wiki/Intel_MCS-48) контроллер. Как оказалось раскладки поддерживает только драйвер USB клавиатуры. Соответвенно для PS2 клавиатур нужно портировать код обработки раскладок.

Ситуацию усложняет еще и так называемый Lеgacy USB. Это стандартная фича USB контроллеров и биосов когда USB клавиатура эмулируется как PS/2 устройство через Intel 8042. Т.е. в большинстве случаев даже если в машину воткнута клавиатура через настоящий USB порт, то биос видит ее как PS/2 клавиатуру. Это можно исправить в ту или другую сторону, но проще не становится.

Итого. При условии что у нас есть драйвер PS/2 клавиатуры, который умеет работать с раскладками, то получается такой псевдокод добавление поддержки национальных символов:

    
    для каждого поддерживаемого языка:
        сгенерировать растровый шрифт национальных символов
        нарисовать раскладку клавиатуры с учетом диакритиков, мертвых клавиш и т.д.
        протестировать с реальной клавиатурой
    конец


Для меня это не выглядит страшным, особенно если учесть, что можно избавится от первого шага сгенерировав "большой" юникодный шрифт один раз. Основная доля работы в раскладках и это будет точно не бесплатно, не из коробки, как в случае с линуксом например.

Мне удалось за один рабочий день корявенько локализовать ввод и вывод на русский язык. Я сгенерировал кривой шрифт и нарисовал раскладку, пока не уперся в то, что VmWare эмулирует клавиатуру как PS/2 устройство, драйвер которого в EDK не понимает раскладки. Но если вынести проблему с драйвером за скобки, то получается примерно такие трудозатраты для относительно простого (и главное знакомого) языка.
